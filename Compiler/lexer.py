from typing import List
import Compiler
from Compiler import reserved_words

transition: List[List[int]] = [
    [2,   1,   1,   1,   1,   2,   10,  599, 19,  7,   20,  21,  22,  35,  16,  18,  0,   23,  25,  27,  28,  30,  34,  36,  126, 128, 129, 130, 131, 132, 133, 134, 599],
    [2,   1,   1,   1,   1,   2,   2,   3,   101, 101, 101, 101, 101, 4,   101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101],
    [2,   2,   2,   2,   2,   2,   2,   3,   102, 102, 102, 102, 102, 4,   102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102],
    [2,   2,   2,   2,   2,   2,   2,   501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501],
    [502, 502, 5,   502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502],
    [502, 502, 502, 6,   502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502],
    [502, 103, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502],
    [111, 111, 111, 111, 111, 111, 111, 111, 8,   111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111],
    [8,   8,   6,   7,   8,   8,   8,   8,   9,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8],
    [8,   8,   6,   7,   8,   8,   8,   8,   9,   104, 8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8,   8],
    [105, 105, 105, 105, 105, 105, 10,  105, 105, 105, 105, 105, 105, 11,  105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105],
    [503, 503, 503, 503, 503, 503, 12,  503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503, 503],
    [13,  13,  106, 106, 106, 106, 12,  106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106],
    [504, 504, 504, 504, 504, 504, 15,  504, 504, 504, 14,  14,  504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504],
    [504, 504, 504, 504, 504, 504, 15,  504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504, 504],
    [107, 107, 107, 107, 107, 107, 15,  107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107],
    [17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  108, 17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17,  17],
    [505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 108, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505, 505],
    [18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  109, 18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18,  18],
    [110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110],
    [112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112],
    [113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113],
    [114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114],
    [506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 24,  506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506, 506],
    [115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115],
    [507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 26,  507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507],
    [116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116],
    [117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 33,  117, 117, 117, 117, 117, 117, 117, 117, 117, 117],
    [118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 118, 29,  118, 118, 118, 118, 118, 118, 118, 118, 118, 118],
    [119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119],
    [120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 31,  120, 120, 120, 120, 120, 120, 120, 120, 120, 120],
    [121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121, 121],
    [122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122],
    [123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123, 123],
    [124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 32,  124, 124, 124, 124, 124, 124, 124, 124, 124, 124],
    [125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125],
    [127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127]
]


class Lexer:
    state: int = ...
    lexeme: str = ...

    def restart(self):
        self.state = 0
        self.lexeme = ''

    def step(self, symbol: str):
        column = Lexer.hash_symbol(symbol)
        self.state = transition[self.state][column]

    def generate_token(self, index: int, text: str):
        self.restart()
        while True:
            self.step(text[index])
            if self.is_delimiter():
                break
            if self.state != 0:
                self.lexeme += text[index]
            index += 1
        if index == len(text):
            return ...  # Return token of EOF
        if self.is_final():
            self.lexeme += text[index]
        else:
            index -= 1
        if self.is_valid() and self.state == Compiler.RESERVED:
            self.state = Compiler.RESERVED if self.lexeme in reserved_words else Compiler.IDENTIFIER
        return ..., index  # Return a token and the index

    def is_delimiter(self):
        return self.state >= 100

    def is_final(self):
        return (self.state == Compiler.LIBRARY
                or self.state == Compiler.COMMENTARY
                or self.state == Compiler.CHARACTER
                or self.state == Compiler.STRING
                or self.state == Compiler.COMMA
                or self.state == Compiler.SEMICOLON
                or self.state == Compiler.PARENTHESISOPEN
                or self.state == Compiler.PARENTHESISCLOSE
                or self.state == Compiler.BRACKETSOPEN
                or self.state == Compiler.BRACKETSCLOSE
                or self.state == Compiler.SQUAREBOPEN
                or self.state == Compiler.SQUAREBCLOSE
                or self.state == Compiler.ERRORUNKNOWN)

    def is_valid(self):
        return self.state < 500

    @staticmethod
    def hash_symbol(symbol: str):
        if symbol == 'E':
            return 0
        elif symbol == 'e':
            return 1
        elif symbol == 'l':
            return 2
        elif symbol == 'y':
            return 3
        elif symbol.islower():
            return 4
        elif symbol.isupper():
            return 5
        elif symbol.isdigit():
            return 6
        elif symbol == '_':
            return 7
        elif symbol == '*':
            return 8
        elif symbol == '/':
            return 9
        elif symbol == '+':
            return 10
        elif symbol == '-':
            return 11
        elif symbol == '%':
            return 12
        elif symbol == '.':
            return 13
        elif symbol == '\'':
            return 14
        elif symbol == '\"':
            return 15
        elif symbol == ' ' or symbol == '\n' or symbol == '\t':
            return 16
        elif symbol == '|':
            return 17
        elif symbol == '&':
            return 18
        elif symbol == '!':
            return 19
        elif symbol == '<':
            return 20
        elif symbol == '>':
            return 21
        elif symbol == '=':
            return 22
        elif symbol == ':':
            return 23
        elif symbol == ',':
            return 24
        elif symbol == '':
            return 25
        elif symbol == '(':
            return 26
        elif symbol == ')':
            return 27
        elif symbol == '{':
            return 28
        elif symbol == '}':
            return 29
        elif symbol == '[':
            return 30
        elif symbol == ']':
            return 31
        else:
            return 32
